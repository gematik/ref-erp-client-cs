//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERezeptClientSimpleExample.CertificateService {
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/tel/error/v2.0")]
    public partial class Error : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string messageIDField;
        
        private System.DateTime timestampField;
        
        private ErrorTrace[] traceField;
        
        public Error() {
            this.messageIDField = "";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
                this.RaisePropertyChanged("MessageID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
                this.RaisePropertyChanged("Timestamp");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Trace", Order=2)]
        public ErrorTrace[] Trace {
            get {
                return this.traceField;
            }
            set {
                this.traceField = value;
                this.RaisePropertyChanged("Trace");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/tel/error/v2.0")]
    public partial class ErrorTrace : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string eventIDField;
        
        private string instanceField;
        
        private string logReferenceField;
        
        private string compTypeField;
        
        private string codeField;
        
        private string severityField;
        
        private string errorTypeField;
        
        private string errorTextField;
        
        private ErrorTraceDetail detailField;
        
        public ErrorTrace() {
            this.eventIDField = "";
            this.instanceField = "";
            this.logReferenceField = "";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string EventID {
            get {
                return this.eventIDField;
            }
            set {
                this.eventIDField = value;
                this.RaisePropertyChanged("EventID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Instance {
            get {
                return this.instanceField;
            }
            set {
                this.instanceField = value;
                this.RaisePropertyChanged("Instance");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string LogReference {
            get {
                return this.logReferenceField;
            }
            set {
                this.logReferenceField = value;
                this.RaisePropertyChanged("LogReference");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string CompType {
            get {
                return this.compTypeField;
            }
            set {
                this.compTypeField = value;
                this.RaisePropertyChanged("CompType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer", Order=4)]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
                this.RaisePropertyChanged("Code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
                this.RaisePropertyChanged("Severity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string ErrorType {
            get {
                return this.errorTypeField;
            }
            set {
                this.errorTypeField = value;
                this.RaisePropertyChanged("ErrorType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ErrorText {
            get {
                return this.errorTextField;
            }
            set {
                this.errorTextField = value;
                this.RaisePropertyChanged("ErrorText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public ErrorTraceDetail Detail {
            get {
                return this.detailField;
            }
            set {
                this.detailField = value;
                this.RaisePropertyChanged("Detail");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/tel/error/v2.0")]
    public partial class ErrorTraceDetail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string encodingField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Encoding {
            get {
                return this.encodingField;
            }
            set {
                this.encodingField = value;
                this.RaisePropertyChanged("Encoding");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class CertificateExpirationType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ctIDField;
        
        private string cardHandleField;
        
        private string iCCSNField;
        
        private string subject_commonNameField;
        
        private string serialNumberField;
        
        private System.DateTime validityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CtID {
            get {
                return this.ctIDField;
            }
            set {
                this.ctIDField = value;
                this.RaisePropertyChanged("CtID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=1)]
        public string CardHandle {
            get {
                return this.cardHandleField;
            }
            set {
                this.cardHandleField = value;
                this.RaisePropertyChanged("CardHandle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ICCSN {
            get {
                return this.iCCSNField;
            }
            set {
                this.iCCSNField = value;
                this.RaisePropertyChanged("ICCSN");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string subject_commonName {
            get {
                return this.subject_commonNameField;
            }
            set {
                this.subject_commonNameField = value;
                this.RaisePropertyChanged("subject_commonName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string serialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
                this.RaisePropertyChanged("serialNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date", Order=5)]
        public System.DateTime validity {
            get {
                return this.validityField;
            }
            set {
                this.validityField = value;
                this.RaisePropertyChanged("validity");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.gematik.de/conn/ConnectorContext/v2.0")]
    public partial class ContextType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string mandantIdField;
        
        private string clientSystemIdField;
        
        private string workplaceIdField;
        
        private string userIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=0)]
        public string MandantId {
            get {
                return this.mandantIdField;
            }
            set {
                this.mandantIdField = value;
                this.RaisePropertyChanged("MandantId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=1)]
        public string ClientSystemId {
            get {
                return this.clientSystemIdField;
            }
            set {
                this.clientSystemIdField = value;
                this.RaisePropertyChanged("ClientSystemId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=2)]
        public string WorkplaceId {
            get {
                return this.workplaceIdField;
            }
            set {
                this.workplaceIdField = value;
                this.RaisePropertyChanged("WorkplaceId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=3)]
        public string UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/WSDL/v6.0", ConfigurationName="CertificateService.CertificateServicePortType")]
    public interface CertificateServicePortType {
        
        // CODEGEN: Generating message contract since the operation CheckCertificateExpiration is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.gematik.de/conn/CertificateService/v6.0#CheckCertificateExpiration", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(ERezeptClientSimpleExample.CertificateService.Error), Action="http://ws.gematik.de/conn/CertificateService/v6.0#CheckCertificateExpiration", Name="Error", Namespace="http://ws.gematik.de/tel/error/v2.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse1 CheckCertificateExpiration(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.gematik.de/conn/CertificateService/v6.0#CheckCertificateExpiration", ReplyAction="*")]
        System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse1> CheckCertificateExpirationAsync(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest request);
        
        // CODEGEN: Generating message contract since the operation ReadCardCertificate is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.gematik.de/conn/CertificateService/v6.0#ReadCardCertificate", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(ERezeptClientSimpleExample.CertificateService.Error), Action="http://ws.gematik.de/conn/CertificateService/v6.0#ReadCardCertificate", Name="Error", Namespace="http://ws.gematik.de/tel/error/v2.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse1 ReadCardCertificate(ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.gematik.de/conn/CertificateService/v6.0#ReadCardCertificate", ReplyAction="*")]
        System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse1> ReadCardCertificateAsync(ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest request);
        
        // CODEGEN: Generating message contract since the operation VerifyCertificate is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.gematik.de/conn/CertificateService/v6.0#VerifyCertificate", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(ERezeptClientSimpleExample.CertificateService.Error), Action="http://ws.gematik.de/conn/CertificateService/v6.0#VerifyCertificate", Name="Error", Namespace="http://ws.gematik.de/tel/error/v2.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse1 VerifyCertificate(ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.gematik.de/conn/CertificateService/v6.0#VerifyCertificate", ReplyAction="*")]
        System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse1> VerifyCertificateAsync(ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class CheckCertificateExpiration : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string cardHandleField;
        
        private ContextType contextField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=0)]
        public string CardHandle {
            get {
                return this.cardHandleField;
            }
            set {
                this.cardHandleField = value;
                this.RaisePropertyChanged("CardHandle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorContext/v2.0", Order=1)]
        public ContextType Context {
            get {
                return this.contextField;
            }
            set {
                this.contextField = value;
                this.RaisePropertyChanged("Context");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class CheckCertificateExpirationResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Status statusField;
        
        private CertificateExpirationType[] certificateExpirationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=0)]
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CertificateExpiration", Order=1)]
        public CertificateExpirationType[] CertificateExpiration {
            get {
                return this.certificateExpirationField;
            }
            set {
                this.certificateExpirationField = value;
                this.RaisePropertyChanged("CertificateExpiration");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0")]
    public partial class Status : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Result resultField;
        
        private Error errorField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Result Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/tel/error/v2.0", Order=1)]
        public Error Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
                this.RaisePropertyChanged("Error");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0")]
    public enum Result {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        Warning,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CheckCertificateExpirationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0", Order=0)]
        public ERezeptClientSimpleExample.CertificateService.CheckCertificateExpiration CheckCertificateExpiration;
        
        public CheckCertificateExpirationRequest() {
        }
        
        public CheckCertificateExpirationRequest(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpiration CheckCertificateExpiration) {
            this.CheckCertificateExpiration = CheckCertificateExpiration;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CheckCertificateExpirationResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0", Order=0)]
        public ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse CheckCertificateExpirationResponse;
        
        public CheckCertificateExpirationResponse1() {
        }
        
        public CheckCertificateExpirationResponse1(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse CheckCertificateExpirationResponse) {
            this.CheckCertificateExpirationResponse = CheckCertificateExpirationResponse;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class ReadCardCertificate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string cardHandleField;
        
        private ContextType contextField;
        
        private ReadCardCertificateCertRef[] certRefListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=0)]
        public string CardHandle {
            get {
                return this.cardHandleField;
            }
            set {
                this.cardHandleField = value;
                this.RaisePropertyChanged("CardHandle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorContext/v2.0", Order=1)]
        public ContextType Context {
            get {
                return this.contextField;
            }
            set {
                this.contextField = value;
                this.RaisePropertyChanged("Context");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("CertRef", IsNullable=false)]
        public ReadCardCertificateCertRef[] CertRefList {
            get {
                return this.certRefListField;
            }
            set {
                this.certRefListField = value;
                this.RaisePropertyChanged("CertRefList");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.gematik.de/conn/CertificateServiceCommon/v2.0")]
    public enum ReadCardCertificateCertRef {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.AUT")]
        CAUT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.ENC")]
        CENC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.SIG")]
        CSIG,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.QES")]
        CQES,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class ReadCardCertificateResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Status statusField;
        
        private X509DataInfoListTypeX509DataInfo[] x509DataInfoListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=0)]
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Namespace="http://ws.gematik.de/conn/CertificateServiceCommon/v2.0", Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("X509DataInfo", IsNullable=false)]
        public X509DataInfoListTypeX509DataInfo[] X509DataInfoList {
            get {
                return this.x509DataInfoListField;
            }
            set {
                this.x509DataInfoListField = value;
                this.RaisePropertyChanged("X509DataInfoList");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateServiceCommon/v2.0")]
    public partial class X509DataInfoListTypeX509DataInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ReadCardCertificateCertRef certRefField;
        
        private X509DataInfoListTypeX509DataInfoX509Data x509DataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ReadCardCertificateCertRef CertRef {
            get {
                return this.certRefField;
            }
            set {
                this.certRefField = value;
                this.RaisePropertyChanged("CertRef");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public X509DataInfoListTypeX509DataInfoX509Data X509Data {
            get {
                return this.x509DataField;
            }
            set {
                this.x509DataField = value;
                this.RaisePropertyChanged("X509Data");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateServiceCommon/v2.0")]
    public partial class X509DataInfoListTypeX509DataInfoX509Data : object, System.ComponentModel.INotifyPropertyChanged {
        
        private X509DataInfoListTypeX509DataInfoX509DataX509IssuerSerial x509IssuerSerialField;
        
        private string x509SubjectNameField;
        
        private byte[] x509CertificateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public X509DataInfoListTypeX509DataInfoX509DataX509IssuerSerial X509IssuerSerial {
            get {
                return this.x509IssuerSerialField;
            }
            set {
                this.x509IssuerSerialField = value;
                this.RaisePropertyChanged("X509IssuerSerial");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string X509SubjectName {
            get {
                return this.x509SubjectNameField;
            }
            set {
                this.x509SubjectNameField = value;
                this.RaisePropertyChanged("X509SubjectName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=2)]
        public byte[] X509Certificate {
            get {
                return this.x509CertificateField;
            }
            set {
                this.x509CertificateField = value;
                this.RaisePropertyChanged("X509Certificate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateServiceCommon/v2.0")]
    public partial class X509DataInfoListTypeX509DataInfoX509DataX509IssuerSerial : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string x509IssuerNameField;
        
        private string x509SerialNumberField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string X509IssuerName {
            get {
                return this.x509IssuerNameField;
            }
            set {
                this.x509IssuerNameField = value;
                this.RaisePropertyChanged("X509IssuerName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string X509SerialNumber {
            get {
                return this.x509SerialNumberField;
            }
            set {
                this.x509SerialNumberField = value;
                this.RaisePropertyChanged("X509SerialNumber");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReadCardCertificateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0", Order=0)]
        public ERezeptClientSimpleExample.CertificateService.ReadCardCertificate ReadCardCertificate;
        
        public ReadCardCertificateRequest() {
        }
        
        public ReadCardCertificateRequest(ERezeptClientSimpleExample.CertificateService.ReadCardCertificate ReadCardCertificate) {
            this.ReadCardCertificate = ReadCardCertificate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReadCardCertificateResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0", Order=0)]
        public ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse ReadCardCertificateResponse;
        
        public ReadCardCertificateResponse1() {
        }
        
        public ReadCardCertificateResponse1(ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse ReadCardCertificateResponse) {
            this.ReadCardCertificateResponse = ReadCardCertificateResponse;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class VerifyCertificate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ContextType contextField;
        
        private byte[] x509CertificateField;
        
        private System.DateTime verificationTimeField;
        
        private bool verificationTimeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorContext/v2.0", Order=0)]
        public ContextType Context {
            get {
                return this.contextField;
            }
            set {
                this.contextField = value;
                this.RaisePropertyChanged("Context");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/CertificateServiceCommon/v2.0", DataType="base64Binary", Order=1)]
        public byte[] X509Certificate {
            get {
                return this.x509CertificateField;
            }
            set {
                this.x509CertificateField = value;
                this.RaisePropertyChanged("X509Certificate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime VerificationTime {
            get {
                return this.verificationTimeField;
            }
            set {
                this.verificationTimeField = value;
                this.RaisePropertyChanged("VerificationTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VerificationTimeSpecified {
            get {
                return this.verificationTimeFieldSpecified;
            }
            set {
                this.verificationTimeFieldSpecified = value;
                this.RaisePropertyChanged("VerificationTimeSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class VerifyCertificateResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Status statusField;
        
        private VerifyCertificateResponseVerificationStatus verificationStatusField;
        
        private string[] roleListField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/conn/ConnectorCommon/v5.0", Order=0)]
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VerifyCertificateResponseVerificationStatus VerificationStatus {
            get {
                return this.verificationStatusField;
            }
            set {
                this.verificationStatusField = value;
                this.RaisePropertyChanged("VerificationStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Role", IsNullable=false)]
        public string[] RoleList {
            get {
                return this.roleListField;
            }
            set {
                this.roleListField = value;
                this.RaisePropertyChanged("RoleList");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public partial class VerifyCertificateResponseVerificationStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private VerificationResultType verificationResultField;
        
        private Error errorField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VerificationResultType VerificationResult {
            get {
                return this.verificationResultField;
            }
            set {
                this.verificationResultField = value;
                this.RaisePropertyChanged("VerificationResult");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://ws.gematik.de/tel/error/v2.0", Order=1)]
        public Error Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
                this.RaisePropertyChanged("Error");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0")]
    public enum VerificationResultType {
        
        /// <remarks/>
        VALID,
        
        /// <remarks/>
        INCONCLUSIVE,
        
        /// <remarks/>
        INVALID,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class VerifyCertificateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0", Order=0)]
        public ERezeptClientSimpleExample.CertificateService.VerifyCertificate VerifyCertificate;
        
        public VerifyCertificateRequest() {
        }
        
        public VerifyCertificateRequest(ERezeptClientSimpleExample.CertificateService.VerifyCertificate VerifyCertificate) {
            this.VerifyCertificate = VerifyCertificate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class VerifyCertificateResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ws.gematik.de/conn/CertificateService/v6.0", Order=0)]
        public ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse VerifyCertificateResponse;
        
        public VerifyCertificateResponse1() {
        }
        
        public VerifyCertificateResponse1(ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse VerifyCertificateResponse) {
            this.VerifyCertificateResponse = VerifyCertificateResponse;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CertificateServicePortTypeChannel : ERezeptClientSimpleExample.CertificateService.CertificateServicePortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CertificateServicePortTypeClient : System.ServiceModel.ClientBase<ERezeptClientSimpleExample.CertificateService.CertificateServicePortType>, ERezeptClientSimpleExample.CertificateService.CertificateServicePortType {
        
        public CertificateServicePortTypeClient() {
        }
        
        public CertificateServicePortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CertificateServicePortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertificateServicePortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CertificateServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse1 ERezeptClientSimpleExample.CertificateService.CertificateServicePortType.CheckCertificateExpiration(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest request) {
            return base.Channel.CheckCertificateExpiration(request);
        }
        
        public ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse CheckCertificateExpiration(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpiration CheckCertificateExpiration1) {
            ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest inValue = new ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest();
            inValue.CheckCertificateExpiration = CheckCertificateExpiration1;
            ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse1 retVal = ((ERezeptClientSimpleExample.CertificateService.CertificateServicePortType)(this)).CheckCertificateExpiration(inValue);
            return retVal.CheckCertificateExpirationResponse;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse1> ERezeptClientSimpleExample.CertificateService.CertificateServicePortType.CheckCertificateExpirationAsync(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest request) {
            return base.Channel.CheckCertificateExpirationAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationResponse1> CheckCertificateExpirationAsync(ERezeptClientSimpleExample.CertificateService.CheckCertificateExpiration CheckCertificateExpiration) {
            ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest inValue = new ERezeptClientSimpleExample.CertificateService.CheckCertificateExpirationRequest();
            inValue.CheckCertificateExpiration = CheckCertificateExpiration;
            return ((ERezeptClientSimpleExample.CertificateService.CertificateServicePortType)(this)).CheckCertificateExpirationAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse1 ERezeptClientSimpleExample.CertificateService.CertificateServicePortType.ReadCardCertificate(ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest request) {
            return base.Channel.ReadCardCertificate(request);
        }
        
        public ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse ReadCardCertificate(ERezeptClientSimpleExample.CertificateService.ReadCardCertificate ReadCardCertificate1) {
            ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest inValue = new ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest();
            inValue.ReadCardCertificate = ReadCardCertificate1;
            ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse1 retVal = ((ERezeptClientSimpleExample.CertificateService.CertificateServicePortType)(this)).ReadCardCertificate(inValue);
            return retVal.ReadCardCertificateResponse;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse1> ERezeptClientSimpleExample.CertificateService.CertificateServicePortType.ReadCardCertificateAsync(ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest request) {
            return base.Channel.ReadCardCertificateAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.ReadCardCertificateResponse1> ReadCardCertificateAsync(ERezeptClientSimpleExample.CertificateService.ReadCardCertificate ReadCardCertificate) {
            ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest inValue = new ERezeptClientSimpleExample.CertificateService.ReadCardCertificateRequest();
            inValue.ReadCardCertificate = ReadCardCertificate;
            return ((ERezeptClientSimpleExample.CertificateService.CertificateServicePortType)(this)).ReadCardCertificateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse1 ERezeptClientSimpleExample.CertificateService.CertificateServicePortType.VerifyCertificate(ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest request) {
            return base.Channel.VerifyCertificate(request);
        }
        
        public ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse VerifyCertificate(ERezeptClientSimpleExample.CertificateService.VerifyCertificate VerifyCertificate1) {
            ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest inValue = new ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest();
            inValue.VerifyCertificate = VerifyCertificate1;
            ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse1 retVal = ((ERezeptClientSimpleExample.CertificateService.CertificateServicePortType)(this)).VerifyCertificate(inValue);
            return retVal.VerifyCertificateResponse;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse1> ERezeptClientSimpleExample.CertificateService.CertificateServicePortType.VerifyCertificateAsync(ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest request) {
            return base.Channel.VerifyCertificateAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERezeptClientSimpleExample.CertificateService.VerifyCertificateResponse1> VerifyCertificateAsync(ERezeptClientSimpleExample.CertificateService.VerifyCertificate VerifyCertificate) {
            ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest inValue = new ERezeptClientSimpleExample.CertificateService.VerifyCertificateRequest();
            inValue.VerifyCertificate = VerifyCertificate;
            return ((ERezeptClientSimpleExample.CertificateService.CertificateServicePortType)(this)).VerifyCertificateAsync(inValue);
        }
    }
}
